/*
 *  This file is automatically generated and does not require a license
 *
 *  ==== WARNING: CHANGES TO THIS GENERATED FILE WILL BE OVERWRITTEN ====
 *
 *  To make changes to the generated code, use the space between existing
 *      "USER CODE START (section: <name>)"
 *  and
 *      "USER CODE END (section: <name>)"
 *  comments, where <name> is a single word identifying the section.
 *  Only these sections will be preserved.
 *
 *  Do not move these sections within this file or change the START and
 *  END comments in any way.
 *  ==== ALL OTHER CHANGES WILL BE OVERWRITTEN WHEN IT IS REGENERATED ====
 *
 *  This file was generated from
 *      C:/ti/grace_3_10_00_82/packages/ti/mcu/msp430/csl/interrupt_vectors/InterruptVectors_init.xdt
 */
#include <msp430.h>
#include "_Grace.h"


/* USER CODE START (section: InterruptVectors_init_c_prologue) */
/* User defined includes, defines, global variables and functions */
#include "../../mppt_ctrl.h"
#include <driverlib/MSP430FR57xx/driverlib.h>

/* USER CODE END (section: InterruptVectors_init_c_prologue) */


/*
 *  ======== InterruptVectors_graceInit ========
 */
void InterruptVectors_graceInit(void)
{
	Timer_A_enableInterrupt(TIMER_A0_BASE);
}

/*
 *  ======== Timer0_A3 Interrupt Service Routine ======== 
 */
#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR_HOOK(void)
{
    /* USER CODE START (section: TIMER0_A0_ISR_HOOK) */
    /* replace this comment with your code */
    /* USER CODE END (section: TIMER0_A0_ISR_HOOK) */
}

/*
 *  ======== Timer0_A3 Interrupt Service Routine ======== 
 */
#pragma vector=TIMER0_A1_VECTOR
__interrupt void TIMER0_A1_ISR_HOOK(void)
{
    /* USER CODE START (section: TIMER0_A1_ISR_HOOK) */
	GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
	//mpptCtrl();
	mpptWindowComparatorCtrl();
	GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2);
	Timer_A_clearTimerInterrupt(TIMER_A0_BASE);

    /* USER CODE END (section: TIMER0_A1_ISR_HOOK) */
}


/*
 *  ======== User NMI Interrupt Service Routine ========
 *
 * Here are several important notes on using User NMI interrupt Handler:
 * 1. User could use the following code to efficiently service the interrupt
 *    handler. Just simply copy and paste it into your user definable code
 *    section.

    switch(__even_in_range(SYSUNIV, 4))
    {
        case SYSUNIV_NONE:   break;         // Vector  SYSUNIV_NONE:   No interrupt
        case SYSUNIV_NMIIFG: break;         // Vector  SYSUNIV_NMIIFG: NMIIFG
        case SYSUNIV_OFIFG:  break;         // Vector  SYSUNIV_OFIFG:  Osc. Fail - OFIFG
        default: break;
    }

 * 2. User could also exit from low power mode and continue with main
 *    program execution by using the following instruction before exiting
 *    this interrupt handler.
 *
 *    __bic_SR_register_on_exit(LPMx_bits);
 *
 */
#pragma vector=UNMI_VECTOR
__interrupt void UNMI_ISR_HOOK(void)
{
    /* USER CODE START (section: UNMI_ISR_HOOK) */
    /* replace this comment with your code */
    /* USER CODE END (section: UNMI_ISR_HOOK) */
}

/*
 *  ======== System NMI Interrupt Service Routine ========
 */
#pragma vector=SYSNMI_VECTOR
__interrupt void SYSNMI_ISR_HOOK(void)
{
    /* USER CODE START (section: SNMI_ISR_HOOK) */
    /* replace this comment with your code */
    /* USER CODE END (section: SNMI_ISR_HOOK) */
}
